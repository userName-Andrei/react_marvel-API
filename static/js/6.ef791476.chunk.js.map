{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearch.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","margin","objectFit","src","error","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","json","data","ok","Error","status","clearError","useHTTP","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterName","name","getAllComics","_transformComic","getComic","char","description","thumbnail","comics","path","extension","homepage","urls","wiki","items","comic","title","pageCount","prices","language","textObjects","price","Skeleton","className","setContent","Component","Spinner","View","test","length","slice","href","RandomChar","setChar","useEffect","updateChar","timerId","setTimeout","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","chars","setChars","newItemLoading","setNewItemLoading","charsOffset","setCharsOffset","charsEnded","setCharsEnded","onRequestChars","onCharsLoaded","newChars","ended","initial","refsArray","useRef","focusItem","current","forEach","ref","classList","remove","add","focus","elements","useMemo","newItem","i","CSSTransition","timeout","classNames","mountOnEnter","elem","onCharSelected","onKeyPress","e","key","tabIndex","TransitionGroup","component","drawChars","disabled","arr","to","resourceURI","split","pop","drawComics","CharInfo","charId","CharSearch","initialValues","character","validate","errors","onSubmit","charName","type","placeholder","ErrorBoundary","state","errorInfo","this","setState","children","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.ef791476.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', margin: '0 auto', objectFit: 'contain'}} src={error} alt=\"Error 403\" />\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import {useHTTP} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHTTP();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public';\r\n    const _apiKey = 'apikey=8826ffc58611993cdd7dc1c1dfc83c2a';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterName = async (name) => {\r\n        const res = await request(`${_apiBase}/characters?name=${name}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset) => {\r\n        const res = await request(`${_apiBase}/comics?issueNumber=10&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        const {id, name, description, thumbnail, comics} = char;\r\n\r\n        return {\r\n            id,\r\n            name: name,\r\n            description: description ? description : 'Description not found.',\r\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: comics.items\r\n        };\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        const {id, title, description, thumbnail, pageCount, prices, urls} = comic;\r\n\r\n        return {\r\n            id,\r\n            title,\r\n            description: description ? description : 'Description not found.',\r\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            pageCount,\r\n            url: urls[0].url,\r\n            price: prices[0].price ? `${prices[0].price}$` : `NOT AVAILABEL`\r\n        };\r\n    }\r\n\r\n    return {clearError, \r\n            process,\r\n            setProcess, \r\n            getAllCharacters, \r\n            getCharacter, \r\n            getCharacterName, \r\n            getAllComics, \r\n            getComic}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHTTP = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state!');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setTimeout(updateChar,60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        };\r\n    }, []);\r\n\r\n    // герой загружен\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    // метод выполняющий запрос на сервер\r\n    const updateChar = () => {\r\n        clearError();\r\n\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n          \r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button \r\n                    className=\"button button__main\"\r\n                    onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// вспомогательный компонент, где отрисовываем левую часть\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    \r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img \r\n                src={thumbnail} \r\n                style={/image_not_available/.test(thumbnail) ? {objectFit: 'contain'} : null} \r\n                alt={name} \r\n                className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {!description ? null : description.length > 200 ? `${description.slice(0, 200)}...` : description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItem) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'loading':\r\n            return newItem ? <Component /> : <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component />;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state!');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [chars, setChars] = useState([]),\r\n        [newItemLoading, setNewItemLoading] = useState(false),\r\n        [charsOffset, setCharsOffset] = useState(210),\r\n        [charsEnded, setCharsEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequestChars(charsOffset, true);\r\n    }, []);\r\n\r\n    // герои загружены\r\n    const onCharsLoaded = (newChars) => {\r\n        let ended = false;\r\n\r\n        if (newChars.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setChars(chars => [...chars, ...newChars]);\r\n        setNewItemLoading(false);\r\n        setCharsOffset(charsOffset => charsOffset + 9);\r\n        setCharsEnded(ended);\r\n    }\r\n\r\n    // метод отправки запроса\r\n    const onRequestChars = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const refsArray = useRef([]);\r\n\r\n    const focusItem = (id) => {\r\n        refsArray.current.forEach(ref => ref.classList.remove('char__item_selected'));\r\n        refsArray.current[id].classList.add('char__item_selected');\r\n        refsArray.current[id].focus();\r\n    }\r\n\r\n    // метод отрисовки героев\r\n    const drawChars = (chars) => {\r\n        const items = chars.map(({thumbnail, name, id}, i) => {\r\n            return (\r\n                <CSSTransition\r\n                    key={id}\r\n                    timeout={500}\r\n                    classNames='char__item'\r\n                    mountOnEnter>\r\n                        <li \r\n                            ref={(elem) => refsArray.current[i] = elem} \r\n                            className=\"char__item\"\r\n                            onClick={() => {\r\n                                props.onCharSelected(id);\r\n                                focusItem(i);\r\n                            }}\r\n                            onKeyPress={(e) => {\r\n                                if (e.key === ' ' || e.key === \"Enter\") {\r\n                                    props.onCharSelected(id);\r\n                                    focusItem(i);\r\n                                }\r\n                            }}\r\n                            tabIndex='0'> \r\n                            <img src={thumbnail}\r\n                                style={/image_not_available/.test(thumbnail) ? {objectFit: 'contain'} : null}\r\n                                alt={name}/>\r\n                            <div className=\"char__name\">{name}</div>\r\n                        </li>\r\n                </CSSTransition>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => drawChars(chars), newItemLoading);\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button className=\"button button__main button__long\"\r\n                    onClick={() => onRequestChars(charsOffset, false)}\r\n                    disabled={newItemLoading || charsEnded}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {charId} = props;\r\n\r\n    const {clearError, process, setProcess, getCharacter} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [charId]);\r\n\r\n    // герой загружен\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        \r\n        if(!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    \r\n    // const skeleton = char || loading || error ? null : <Skeleton/>,\r\n    //       errorMessage = error ? <ErrorMessage /> : null,\r\n    //       spinner = loading ? <Spinner /> : null,\r\n    //       content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {/* {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content} */}\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n\r\n    const drawComics = (arr) => {\r\n        if (typeof(arr) === 'undefined') return;\r\n        if (arr.length === 0) return \"Comics of this character is not found.\";\r\n\r\n        const items = arr.map((comic, i) => {\r\n            // eslint-disable-next-line\r\n            if(i > 9) return;\r\n            return (\r\n                <li key={i} \r\n                    className=\"char__comics-item\">\r\n                    <Link to={`/comics/${comic.resourceURI.split('/').pop()}`}>{comic.name}</Link>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__comics-list\">\r\n                {items}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} \r\n                    style={/image_not_available/.test(thumbnail) ? {objectFit: 'contain'} : null}\r\n                    alt={name}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            {drawComics(comics)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Formik, Form, Field, ErrorMessage as ErrorMsg} from 'formik';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearch.scss';\r\n\r\nconst setContent = (process, char) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n        case 'loading':\r\n        case 'confirmed':\r\n            return !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state!');\r\n    }\r\n}\r\n\r\nconst CharSearch = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (charName) => {\r\n        clearError();\r\n        \r\n        getCharacterName(charName)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className='char__search'>\r\n            <div className=\"char__search-title\">Or find a character by name:</div>\r\n            <Formik\r\n                initialValues={{ character: '' }}\r\n                validate={({character}) => {\r\n                    const errors = {};\r\n                    if (!character) {\r\n                        errors.character = 'This field is required';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={({character}) => {\r\n                    updateChar(character);\r\n                }}>\r\n                <Form className='char__search-wrapper'>\r\n                    <Field type=\"text\" name=\"character\" placeholder='Enter name'/>\r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"button button__main\"\r\n                        disabled={process === 'loading'}>\r\n                        <div className=\"inner\">find</div>\r\n                    </button>\r\n                    <ErrorMsg name=\"character\" component=\"div\" className='char__search-error'/>\r\n                </Form>\r\n            </Formik>\r\n            {setContent(process, char)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharSearch;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport {Helmet} from 'react-helmet';\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport CharSearch from \"../components/charSearch/CharSearch\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../src/resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(() => id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n            <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <div>\r\n                        <CharInfo charId={selectedChar}/>\r\n                        <CharSearch />\r\n                    </div>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}